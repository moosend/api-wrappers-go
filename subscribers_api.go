/* 
 * Moosend API
 *
 * TODO: Add a description
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

package Moosend.Wrappers.GOWrapper

import (
	"net/url"
	"strings"
	"encoding/json"
	"fmt"
)

type SubscribersApi struct {
	Configuration *Configuration
}

func NewSubscribersApi() *SubscribersApi {
	configuration := NewConfiguration()
	return &SubscribersApi{
		Configuration: configuration,
	}
}

func NewSubscribersApiWithBasePath(basePath string) *SubscribersApi {
	configuration := NewConfiguration()
	configuration.BasePath = basePath

	return &SubscribersApi{
		Configuration: configuration,
	}
}

/**
 * Adding multiple subscribers
 * This method allows you to add multiple subscribers in a mailing list with a single call. If some subscribers already exist with the given email addresses, they will be updated. If you try to add a subscriber with an invalid email address, this attempt will be ignored, as the process will skip to the next subscriber automatically.
 *
 * @param format 
 * @param apikey You may find your API Key or generate a new one in your account settings.
 * @param mailingListID The ID of the mailing list to add subscribers to.
 * @param body 
 * @return *AddingMultipleSubscribersResponse
 */
func (a SubscribersApi) AddingMultipleSubscribers(format string, apikey string, mailingListID string, body AddingMultipleSubscribersRequest) (*AddingMultipleSubscribersResponse, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Post")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/subscribers/{MailingListID}/subscribe_many.{Format}"
	localVarPath = strings.Replace(localVarPath, "{"+"Format"+"}", fmt.Sprintf("%v", format), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"MailingListID"+"}", fmt.Sprintf("%v", mailingListID), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}
	localVarQueryParams.Add("apikey", a.Configuration.APIClient.ParameterToString(apikey, ""))

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	var successPayload = new(AddingMultipleSubscribersResponse)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "AddingMultipleSubscribers", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * Adding subscribers
 * Adds a new subscriber to the specified mailing list. If there is already a subscriber with the specified email address in the list, an update will be performed instead.
 *
 * @param format 
 * @param mailingListID The ID of the mailing list to add the new member.
 * @param apikey You may find your API Key or generate a new one in your account settings.
 * @param body 
 * @return *AddingSubscribersResponse
 */
func (a SubscribersApi) AddingSubscribers(format string, mailingListID string, apikey string, body AddingSubscribersRequest) (*AddingSubscribersResponse, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Post")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/subscribers/{MailingListID}/subscribe.{Format}"
	localVarPath = strings.Replace(localVarPath, "{"+"Format"+"}", fmt.Sprintf("%v", format), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"MailingListID"+"}", fmt.Sprintf("%v", mailingListID), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}
	localVarQueryParams.Add("apikey", a.Configuration.APIClient.ParameterToString(apikey, ""))

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	var successPayload = new(AddingSubscribersResponse)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "AddingSubscribers", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * Get subscriber by email address
 * Searches for a subscriber with the specified email address in the specified mailing list and returns detailed information such as id, name, date created, date unsubscribed, status and custom fields
 *
 * @param format 
 * @param apikey You may find your API Key or generate a new one in your account settings.
 * @param mailingListID The ID of the mailing list where the subscriber belongs.
 * @param email The email of the subscriber.
 * @return *GetSubscriberByEmailAddressResponse
 */
func (a SubscribersApi) GetSubscriberByEmailAddress(format string, apikey string, mailingListID string, email string) (*GetSubscriberByEmailAddressResponse, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/subscribers/{MailingListID}/view.{Format}"
	localVarPath = strings.Replace(localVarPath, "{"+"Format"+"}", fmt.Sprintf("%v", format), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"MailingListID"+"}", fmt.Sprintf("%v", mailingListID), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}
	localVarQueryParams.Add("apikey", a.Configuration.APIClient.ParameterToString(apikey, ""))
	localVarQueryParams.Add("Email", a.Configuration.APIClient.ParameterToString(email, ""))

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new(GetSubscriberByEmailAddressResponse)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "GetSubscriberByEmailAddress", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * Get subscriber by id
 * Searches for a subscriber with the specified unique id in the specified mailing list and returns detailed information such as email, name, date created, date unsubscribed, status and custom fields.
 *
 * @param format 
 * @param apikey You may find your API Key or generate a new one in your account settings.
 * @param mailingListID The ID of the mailing list to search the subscriber in.
 * @param subscriberID The id of the subscriber being searched.
 * @return *GetSubscriberByIdResponse
 */
func (a SubscribersApi) GetSubscriberById(format string, apikey string, mailingListID string, subscriberID string) (*GetSubscriberByIdResponse, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/subscribers/{MailingListID}/find/{SubscriberID}.{Format}"
	localVarPath = strings.Replace(localVarPath, "{"+"Format"+"}", fmt.Sprintf("%v", format), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"MailingListID"+"}", fmt.Sprintf("%v", mailingListID), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"SubscriberID"+"}", fmt.Sprintf("%v", subscriberID), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}
	localVarQueryParams.Add("apikey", a.Configuration.APIClient.ParameterToString(apikey, ""))

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new(GetSubscriberByIdResponse)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "GetSubscriberById", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * Getting subscribers
 * Gets a list of all subscribers in a given mailing list. You may filter the list by setting a date to fetch those subscribed since then and/or by their status. Because the results for this call could be quite big, paging information is required as input.
 *
 * @param format 
 * @param mailingListID The ID of the mailing list where the subscribers belong.
 * @param apikey You may find your API Key or generate a new one in your account settings.
 * @param status Specifies what type of subscriber statistics results will be returned.
 * @param page Specifies the page of subscriber statistics results will be returned.
 * @param pageSize Specifies the page size of subscriber statistics results will be returned.
 * @return *GettingSubscribersResponse
 */
func (a SubscribersApi) GettingSubscribers(format string, mailingListID string, apikey string, status string, page float64, pageSize float64) (*GettingSubscribersResponse, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/lists/{MailingListID}/subscribers/{Status}.{Format}"
	localVarPath = strings.Replace(localVarPath, "{"+"Format"+"}", fmt.Sprintf("%v", format), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"MailingListID"+"}", fmt.Sprintf("%v", mailingListID), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Status"+"}", fmt.Sprintf("%v", status), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}
	localVarQueryParams.Add("apikey", a.Configuration.APIClient.ParameterToString(apikey, ""))
	localVarQueryParams.Add("Page", a.Configuration.APIClient.ParameterToString(page, ""))
	localVarQueryParams.Add("PageSize", a.Configuration.APIClient.ParameterToString(pageSize, ""))

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new(GettingSubscribersResponse)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "GettingSubscribers", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * Removing a subscriber
 * Removes a subscriber from the specified mailing list permanently (without moving to the suppression list).
 *
 * @param format 
 * @param apikey You may find your API Key or generate a new one in your account settings.
 * @param mailingListID The ID of the mailing list to remove the subscriber from.
 * @param body 
 * @return *RemovingASubscriberResponse
 */
func (a SubscribersApi) RemovingASubscriber(format string, apikey string, mailingListID string, body RemovingASubscriberRequest) (*RemovingASubscriberResponse, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Post")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/subscribers/{MailingListID}/remove.{Format}"
	localVarPath = strings.Replace(localVarPath, "{"+"Format"+"}", fmt.Sprintf("%v", format), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"MailingListID"+"}", fmt.Sprintf("%v", mailingListID), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}
	localVarQueryParams.Add("apikey", a.Configuration.APIClient.ParameterToString(apikey, ""))

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	var successPayload = new(RemovingASubscriberResponse)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "RemovingASubscriber", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * Removing multiple subscribers
 * Removes a list of subscribers from the specified mailing list permanently (without putting them in the suppression list). Any invalid email addresses specified will be ignored.
 *
 * @param format 
 * @param apikey You may find your API Key or generate a new one in your account settings.
 * @param mailingListID The ID of the mailing list to remove the subscribers from.
 * @param body 
 * @return *RemovingMultipleSubscribersResponse
 */
func (a SubscribersApi) RemovingMultipleSubscribers(format string, apikey string, mailingListID string, body RemovingMultipleSubscribersRequest) (*RemovingMultipleSubscribersResponse, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Post")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/subscribers/{MailingListID}/remove_many.{Format}"
	localVarPath = strings.Replace(localVarPath, "{"+"Format"+"}", fmt.Sprintf("%v", format), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"MailingListID"+"}", fmt.Sprintf("%v", mailingListID), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}
	localVarQueryParams.Add("apikey", a.Configuration.APIClient.ParameterToString(apikey, ""))

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	var successPayload = new(RemovingMultipleSubscribersResponse)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "RemovingMultipleSubscribers", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * Unsubscribing subscribers from account
 * Unsubscribes a subscriber from the account.
 *
 * @param format 
 * @param apikey You may find your API Key or generate a new one in your account settings.
 * @param body 
 * @return *UnsubscribingSubscribersFromAccountResponse
 */
func (a SubscribersApi) UnsubscribingSubscribersFromAccount(format string, apikey string, body UnsubscribingSubscribersFromAccountRequest) (*UnsubscribingSubscribersFromAccountResponse, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Post")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/subscribers/unsubscribe.{Format}"
	localVarPath = strings.Replace(localVarPath, "{"+"Format"+"}", fmt.Sprintf("%v", format), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}
	localVarQueryParams.Add("apikey", a.Configuration.APIClient.ParameterToString(apikey, ""))

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	var successPayload = new(UnsubscribingSubscribersFromAccountResponse)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "UnsubscribingSubscribersFromAccount", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * Unsubscribing subscribers from mailing list
 * Unsubscribes a subscriber from the specified mailing list. The subscriber is not deleted, but moved to the suppression list.
 *
 * @param format 
 * @param apikey You may find your API Key or generate a new one in your account settings.
 * @param mailingListID The ID of the mailing list to add subscribers to.
 * @param body 
 * @return *UnsubscribingSubscribersFromMailingListResponse
 */
func (a SubscribersApi) UnsubscribingSubscribersFromMailingList(format string, apikey string, mailingListID string, body UnsubscribingSubscribersFromMailingListRequest) (*UnsubscribingSubscribersFromMailingListResponse, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Post")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/subscribers/{MailingListID}/unsubscribe.{Format}"
	localVarPath = strings.Replace(localVarPath, "{"+"Format"+"}", fmt.Sprintf("%v", format), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"MailingListID"+"}", fmt.Sprintf("%v", mailingListID), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}
	localVarQueryParams.Add("apikey", a.Configuration.APIClient.ParameterToString(apikey, ""))

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	var successPayload = new(UnsubscribingSubscribersFromMailingListResponse)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "UnsubscribingSubscribersFromMailingList", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * Unsubscribing subscribers from mailing list and a specified campaign
 * Unsubscribes a subscriber from the specified mailing list and the specified campaign. The subscriber is not deleted, but moved to the suppression list.  This call will take into account the setting you have in \&quot;suppression list and unsubscribe settings\&quot; and will remove the subscriber from all other mailing lists or not accordingly.
 *
 * @param format 
 * @param campaignID The ID of the campaign that was sent to the specific mailing list.
 * @param apikey You may find your API Key or generate a new one in your account settings.
 * @param mailingListID The ID of the mailing list to remove the subscriber from.
 * @param body 
 * @return *UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse
 */
func (a SubscribersApi) UnsubscribingSubscribersFromMailingListAndASpecifiedCampaign(format string, campaignID string, apikey string, mailingListID string, body UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignRequest) (*UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Post")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/subscribers/{MailingListID}/{CampaignID}/unsubscribe.{Format}"
	localVarPath = strings.Replace(localVarPath, "{"+"Format"+"}", fmt.Sprintf("%v", format), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"CampaignID"+"}", fmt.Sprintf("%v", campaignID), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"MailingListID"+"}", fmt.Sprintf("%v", mailingListID), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}
	localVarQueryParams.Add("apikey", a.Configuration.APIClient.ParameterToString(apikey, ""))

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	var successPayload = new(UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "UnsubscribingSubscribersFromMailingListAndASpecifiedCampaign", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * Updating a subscriber
 * Updates a subscriber in the specified mailing list. You can even update the subscribers email, if he has not unsubscribed.
 *
 * @param format 
 * @param apikey You may find your API Key or generate a new one in your account settings.
 * @param mailingListID The ID of the mailing list that contains the subscriber
 * @param subscriberID The id of the subscriber to be updated
 * @param body 
 * @return *UpdatingASubscriberResponse
 */
func (a SubscribersApi) UpdatingASubscriber(format string, apikey string, mailingListID string, subscriberID string, body UpdatingASubscriberRequest) (*UpdatingASubscriberResponse, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Post")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/subscribers/{MailingListID}/update/{SubscriberID}.{Format}"
	localVarPath = strings.Replace(localVarPath, "{"+"Format"+"}", fmt.Sprintf("%v", format), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"MailingListID"+"}", fmt.Sprintf("%v", mailingListID), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"SubscriberID"+"}", fmt.Sprintf("%v", subscriberID), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}
	localVarQueryParams.Add("apikey", a.Configuration.APIClient.ParameterToString(apikey, ""))

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	var successPayload = new(UpdatingASubscriberResponse)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "UpdatingASubscriber", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

